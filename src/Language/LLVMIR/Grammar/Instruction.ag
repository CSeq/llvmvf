{
-------------------------------------------------------------------------------
-- Module    :  Language.LLVMIR.Grammar.Instruction
-- Copyright :  (c) 2013 Marcelo Sousa
-------------------------------------------------------------------------------
}

module {Language.LLVMIR.Grammar.Instruction}{}{}

data RetInst
  | ValueRet v :: Value
  | VoidRet 

data Instruction
  -- Terminators
  | Ret         pc :: PC r :: RetInst
  | Br          pc :: PC v :: Value t :: Value f :: Value
  | UBr         pc :: PC d :: Value 
  | Switch      pc :: PC ty :: Type v :: Value elems :: ValIdL -- TODO
  | Unreachable pc :: PC
  -- Standard Binary Operations
  | Add  pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | FAdd pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | Sub  pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | FSub pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | Mul  pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | FMul pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | UDiv pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | SDiv pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | FDiv pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | URem pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | SRem pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | FRem pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  -- Bitwise Binary Operations
  | Shl  pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | LShr pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | AShr pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | And  pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | Or   pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  | Xor  pc :: PC id :: Identifier ty :: Type op1 :: Value op2 :: Value
  -- Memory Operations
  | Alloca
      pc    :: PC
      id    :: Identifier
      ty    :: Type
      align :: Align 
  | Store
      pc    :: PC
      ty    :: Type
      v1    :: Value
      v2    :: Value
      align :: Align
  | Load
      pc    :: PC
      id    :: Identifier
      v     :: Value 
      align :: Align
  | GetElementPtr
      pc     :: PC
      id     :: Identifier
      ty     :: Type
      struct :: Value
      idxs   :: Values
  -- Cast Operations
  | Trunc    pc :: PC id :: Identifier v :: Value ty   :: Type -- Truncate integers
  | ZExt     pc :: PC id :: Identifier v :: Value ty   :: Type -- Zero extend integers
  | SExt     pc :: PC id :: Identifier v :: Value ty   :: Type -- Sign extend integers
  | FPToUI   pc :: PC id :: Identifier v :: Value ty   :: Type -- floating point -> UInt
  | FPToSI   pc :: PC id :: Identifier v :: Value ty   :: Type -- floating point -> SInt
  | UIToFP   pc :: PC id :: Identifier v :: Value ty   :: Type -- UInt -> floating point
  | SIToFP   pc :: PC id :: Identifier v :: Value ty   :: Type -- SInt -> floating point
  | FPTrunc  pc :: PC id :: Identifier v :: Value ty   :: Type -- Truncate floating point
  | FPExt    pc :: PC id :: Identifier v :: Value ty   :: Type -- Extend floating point
  | PtrToInt pc :: PC id :: Identifier v :: Value ty   :: Type -- Pointer -> Integer
  | IntToPtr pc :: PC id :: Identifier v :: Value ty   :: Type -- Integer -> Pointer
  | BitCast  pc :: PC id :: Identifier v :: Value ty   :: Type -- Type cast      
  -- Other Operations
  | ICmp pc :: PC id :: Identifier cond :: IntPredicate ty :: Type op1 :: Value op2 :: Value 
  | FCmp pc :: PC id :: Identifier cond :: RealPredicate ty :: Type op1 :: Value op2 :: Value 
  | PHI
      pc :: PC
      id :: Identifier
      ty :: Type
      vals :: PValues
  | Call
      pc     :: PC
      mres   :: Identifier
      ty     :: Type
      callee :: Identifier
      args   :: Values 
  | Select
      pc :: PC
      id :: Identifier
      cond :: Value
      valt :: Value
      valf :: Value
  | ExtractValue
      pc   :: PC
      id   :: Identifier
      aggr :: Value
      idxs :: Ints
  | InsertValue
      pc   :: PC
      id   :: Identifier
      aggr :: Value
      ival  :: Value
      idxs :: Ints
  | Cmpxchg
      pc   :: PC
      id   :: Identifier
      mptr :: Value
      cval :: Value
      nval :: Value
      ord  :: AtomicOrdering
  | AtomicRMW
      pc :: PC
      id :: Identifier
      mptr :: Value
      opval :: Value
      op  :: BinOp
      ord :: AtomicOrdering
  -- Concurrent Operations Added
  | CreateThread pc :: PC args :: Values
  | JoinThread   pc :: PC id :: Identifier
  | ExitThread   pc :: PC
  | MutexInit    pc :: PC rv :: Identifier mutex :: Value     
  | MutexLock    pc :: PC rv :: Identifier mutex :: Value
  | MutexUnlock  pc :: PC rv :: Identifier mutex :: Value
  | MutexDestroy pc :: PC rv :: Identifier mutex :: Value
  | WaitEvent    pc :: PC event :: Int
  | NotifyEvent  pc :: PC event :: Int
  | WaitTime     pc :: PC time :: Value

data BinOp
  | OpXchg
  | OpAdd
  | OpSub
  | OpAnd
  | OpNand
  | OpOr
  | OpXor
  | OpMax
  | OpMin
  | OpUMax
  | OpUMin

data AtomicOrdering
  | NotAtomic 
  | Unordered 
  | Monotonic 
 -- | // Consume = 3,  // Not specified yet.
  | Acquire 
  | Release 
  | AcquireRelease 
  | SequentiallyConsistent 

data IntPredicate
  | IntEQ                  -- ^ equal
  | IntNE                  -- ^ not equal
  | IntUGT                 -- ^ unsigned greater than
  | IntUGE                 -- ^ unsigned greater or equal
  | IntULT                 -- ^ unsigned less than
  | IntULE                 -- ^ unsigned less or equal
  | IntSGT                 -- ^ signed greater than
  | IntSGE                 -- ^ signed greater or equal
  | IntSLT                 -- ^ signed less than
  | IntSLE                 -- ^ signed less or equal

data RealPredicate
  | LLVMRealPredicateFalse -- ^ Always false (always folded) 
  | LLVMRealOEQ            -- ^ True if ordered and equal 
  | LLVMRealOGT            -- ^ True if ordered and greater than 
  | LLVMRealOGE            -- ^ True if ordered and greater than or equal 
  | LLVMRealOLT            -- ^ True if ordered and less than 
  | LLVMRealOLE            -- ^ True if ordered and less than or equal 
  | LLVMRealONE            -- ^ True if ordered and operands are unequal 
  | LLVMRealORD            -- ^ True if ordered (no nans) 
  | LLVMRealUNO            -- ^ True if unordered: isnan(X) | isnan(Y) 
  | LLVMRealUEQ            -- ^ True if unordered or equal 
  | LLVMRealUGT            -- ^ True if unordered or greater than 
  | LLVMRealUGE            -- ^ True if unordered, greater than, or equal 
  | LLVMRealULT            -- ^ True if unordered or less than
  | LLVMRealULE            -- ^ True if unordered, less than, or equal 
  | LLVMRealUNE            -- ^ True if unordered or not equal 
  | LLVMRealPredicateTrue  -- ^ Always true (always folded) 
