(set-logic QF_AUFBV)
(set-option :produce-models true)
(declare-sort Pair 2)
(define-sort I8 () (_ BitVec 8))
(define-sort I32 () (_ BitVec 32))
(define-sort I64 () (_ BitVec 64))
(define-sort struct.__pthread_internal_list () Bool)
(define-sort struct.__pthread_mutex_s () Bool)
(define-sort Array48I8 () (Array (_ BitVec 6) I8))
(define-sort union.pthread_attr_t () (Pair I64 Array48I8))
(define-sort union.pthread_mutex_t () Bool)
(define-sort union.pthread_mutexattr_t () I32)
(declare-fun x () I32)
(declare-fun lx () I32)
(declare-fun m () union.pthread_mutex_t)
(declare-fun lm () I32)
(define-sort Array5I8 () (Array (_ BitVec 3) I8))
(declare-fun .str () Array5I8)
(declare-fun l.str () I32)
(define-sort Array8I8 () (Array (_ BitVec 4) I8))
(declare-fun .str1 () Array8I8)
(declare-fun l.str1 () I32)
(define-sort Array17I8 () (Array (_ BitVec 5) I8))
(declare-fun __PRETTY_FUNCTION__.Ty () Array17I8)
(declare-fun l__PRETTY_FUNCTION__.Ty () I32)
(assert (and (= x (_ bv2 32)) (= lx (_ bv0 32))))
(declare-fun Tytmp1 () I32)
(declare-fun Tytmp2 () Bool)
(declare-fun maint1 () I64)
(declare-fun maint2 () I64)
(declare-fun Txarg () I8)
(declare-fun Tyarg () I8)
(declare-fun x0 () I32)
(declare-fun pc0 () I32)
(declare-fun pc1 () I32)
(declare-fun pc2 () I32)
(declare-fun pc3 () I32)
(declare-fun pc4 () I32)
(assert (and (= pc0 (_ bv13 32)) (and (= pc1 (_ bv14 32)) (and (= pc2 (_ bv15 32)) (and (= pc3 (_ bv16 32)) (= pc4 (_ bv17 32)))))))
(declare-fun px0 () I32)
(declare-fun px1 () I32)
(declare-fun px2 () I32)
(declare-fun px3 () I32)
(declare-fun px4 () I32)
(declare-fun px5 () I32)
(declare-fun px6 () I32)
(declare-fun m0 () Bool)
(declare-fun m1 () Bool)
(declare-fun m2 () Bool)
(declare-fun m3 () Bool)
(declare-fun m4 () Bool)
(declare-fun m5 () Bool)
(declare-fun m6 () Bool)
(declare-fun Txpc0 () I32)
(declare-fun Typc0 () I32)
(declare-fun Txpc1 () I32)
(declare-fun Typc1 () I32)
(declare-fun Txpc2 () I32)
(declare-fun Typc2 () I32)
(declare-fun Txpc3 () I32)
(declare-fun Typc3 () I32)
(declare-fun Txpc4 () I32)
(declare-fun Typc4 () I32)
(declare-fun Txpc5 () I32)
(declare-fun Typc5 () I32)
(declare-fun Txpc6 () I32)
(declare-fun Typc6 () I32)
(declare-fun Tx0 () Bool)
(declare-fun Ty0 () Bool)
(declare-fun Tx1 () Bool)
(declare-fun Ty1 () Bool)
(declare-fun Tx2 () Bool)
(declare-fun Ty2 () Bool)
(declare-fun Tx3 () Bool)
(declare-fun Ty3 () Bool)
(declare-fun Tx4 () Bool)
(declare-fun Ty4 () Bool)
(declare-fun Tx5 () Bool)
(declare-fun Ty5 () Bool)
(declare-fun Tx6 () Bool)
(declare-fun Ty6 () Bool)
(assert (and (and (= Txpc0 (_ bv1 32)) (= Typc0 (_ bv5 32))) (and (= px0 lx) (and (and (and (xor Tx0 Ty0) (or (and (and (and Tx0 (and (= Txpc0 (_ bv1 32)) (and (= m0 false) (= px1 px0)))) (= Txpc1 (_ bv2 32))) (and m1 (= Typc1 Typc0))) (or (and (and (and Tx0 (and (= Txpc0 (_ bv2 32)) (and (= x0 (_ bv3 32)) (= px1 (_ bv2 32))))) (= Txpc1 (_ bv3 32))) (and (= m1 m0) (= Typc1 Typc0))) (or (and (and (and Tx0 (and (= Txpc0 (_ bv3 32)) (and m0 (= px1 px0)))) (= Txpc1 (_ bv4 32))) (and (= m1 false) (= Typc1 Typc0))) (or (and (and (and Tx0 (and (= Txpc0 (_ bv4 32)) (= px1 px0))) false) (and (= m1 m0) (= Typc1 Typc0))) (or (and (and (and Ty0 (and (= Typc0 (_ bv5 32)) (and (= m0 false) (= px1 px0)))) (= Typc1 (_ bv6 32))) (and m1 (= Txpc1 Txpc0))) (or (and (and (and Ty0 (and (= Typc0 (_ bv6 32)) (and (or (and (= px0 lx) (= Tytmp1 x)) (and (= px0 (_ bv2 32)) (= Tytmp1 x0))) (= px1 px0)))) (= Typc1 (_ bv7 32))) (and (= m1 m0) (= Txpc1 Txpc0))) (or (and (and (and Ty0 (and (= Typc0 (_ bv7 32)) (and (= Tytmp2 (= Tytmp1 (_ bv2 32))) (= px1 px0)))) (= Typc1 (_ bv8 32))) (and (= m1 m0) (= Txpc1 Txpc0))) (or (and (and (and Ty0 (and (= Typc0 (_ bv8 32)) (= px1 px0))) (or (and Tytmp2 (= Typc1 (_ bv11 32))) (and (not Tytmp2) (= Typc1 (_ bv9 32))))) (and (= m1 m0) (= Txpc1 Txpc0))) (or (and (and (and Ty0 (= Typc0 (_ bv9 32))) (= Typc1 (_ bv10 32))) (and (= m1 m0) (= Txpc1 Txpc0))) (or (and (and (and Ty0 (and (= Typc0 (_ bv10 32)) (= px1 px0))) false) (and (= m1 m0) (= Txpc1 Txpc0))) (or (and (and (and Ty0 (and (= Typc0 (_ bv11 32)) (and m0 (= px1 px0)))) (= Typc1 (_ bv12 32))) (and (= m1 false) (= Txpc1 Txpc0))) (and (and (and Ty0 (and (= Typc0 (_ bv12 32)) (= px1 px0))) false) (and (= m1 m0) (= Txpc1 Txpc0))))))))))))))) (and (and (xor Tx1 Ty1) (or (and (and (and Tx1 (and (= Txpc1 (_ bv1 32)) (and (= m1 false) (= px2 px1)))) (= Txpc2 (_ bv2 32))) (and m2 (= Typc2 Typc1))) (or (and (and (and Tx1 (and (= Txpc1 (_ bv2 32)) (and (= x0 (_ bv3 32)) (= px2 (_ bv2 32))))) (= Txpc2 (_ bv3 32))) (and (= m2 m1) (= Typc2 Typc1))) (or (and (and (and Tx1 (and (= Txpc1 (_ bv3 32)) (and m1 (= px2 px1)))) (= Txpc2 (_ bv4 32))) (and (= m2 false) (= Typc2 Typc1))) (or (and (and (and Tx1 (and (= Txpc1 (_ bv4 32)) (= px2 px1))) false) (and (= m2 m1) (= Typc2 Typc1))) (or (and (and (and Ty1 (and (= Typc1 (_ bv5 32)) (and (= m1 false) (= px2 px1)))) (= Typc2 (_ bv6 32))) (and m2 (= Txpc2 Txpc1))) (or (and (and (and Ty1 (and (= Typc1 (_ bv6 32)) (and (or (and (= px1 lx) (= Tytmp1 x)) (and (= px1 (_ bv2 32)) (= Tytmp1 x0))) (= px2 px1)))) (= Typc2 (_ bv7 32))) (and (= m2 m1) (= Txpc2 Txpc1))) (or (and (and (and Ty1 (and (= Typc1 (_ bv7 32)) (and (= Tytmp2 (= Tytmp1 (_ bv2 32))) (= px2 px1)))) (= Typc2 (_ bv8 32))) (and (= m2 m1) (= Txpc2 Txpc1))) (or (and (and (and Ty1 (and (= Typc1 (_ bv8 32)) (= px2 px1))) (or (and Tytmp2 (= Typc2 (_ bv11 32))) (and (not Tytmp2) (= Typc2 (_ bv9 32))))) (and (= m2 m1) (= Txpc2 Txpc1))) (or (and (and (and Ty1 (= Typc1 (_ bv9 32))) (= Typc2 (_ bv10 32))) (and (= m2 m1) (= Txpc2 Txpc1))) (or (and (and (and Ty1 (and (= Typc1 (_ bv10 32)) (= px2 px1))) false) (and (= m2 m1) (= Txpc2 Txpc1))) (or (and (and (and Ty1 (and (= Typc1 (_ bv11 32)) (and m1 (= px2 px1)))) (= Typc2 (_ bv12 32))) (and (= m2 false) (= Txpc2 Txpc1))) (and (and (and Ty1 (and (= Typc1 (_ bv12 32)) (= px2 px1))) false) (and (= m2 m1) (= Txpc2 Txpc1))))))))))))))) (and (and (xor Tx2 Ty2) (or (and (and (and Tx2 (and (= Txpc2 (_ bv1 32)) (and (= m2 false) (= px3 px2)))) (= Txpc3 (_ bv2 32))) (and m3 (= Typc3 Typc2))) (or (and (and (and Tx2 (and (= Txpc2 (_ bv2 32)) (and (= x0 (_ bv3 32)) (= px3 (_ bv2 32))))) (= Txpc3 (_ bv3 32))) (and (= m3 m2) (= Typc3 Typc2))) (or (and (and (and Tx2 (and (= Txpc2 (_ bv3 32)) (and m2 (= px3 px2)))) (= Txpc3 (_ bv4 32))) (and (= m3 false) (= Typc3 Typc2))) (or (and (and (and Tx2 (and (= Txpc2 (_ bv4 32)) (= px3 px2))) false) (and (= m3 m2) (= Typc3 Typc2))) (or (and (and (and Ty2 (and (= Typc2 (_ bv5 32)) (and (= m2 false) (= px3 px2)))) (= Typc3 (_ bv6 32))) (and m3 (= Txpc3 Txpc2))) (or (and (and (and Ty2 (and (= Typc2 (_ bv6 32)) (and (or (and (= px2 lx) (= Tytmp1 x)) (and (= px2 (_ bv2 32)) (= Tytmp1 x0))) (= px3 px2)))) (= Typc3 (_ bv7 32))) (and (= m3 m2) (= Txpc3 Txpc2))) (or (and (and (and Ty2 (and (= Typc2 (_ bv7 32)) (and (= Tytmp2 (= Tytmp1 (_ bv2 32))) (= px3 px2)))) (= Typc3 (_ bv8 32))) (and (= m3 m2) (= Txpc3 Txpc2))) (or (and (and (and Ty2 (and (= Typc2 (_ bv8 32)) (= px3 px2))) (or (and Tytmp2 (= Typc3 (_ bv11 32))) (and (not Tytmp2) (= Typc3 (_ bv9 32))))) (and (= m3 m2) (= Txpc3 Txpc2))) (or (and (and (and Ty2 (= Typc2 (_ bv9 32))) (= Typc3 (_ bv10 32))) (and (= m3 m2) (= Txpc3 Txpc2))) (or (and (and (and Ty2 (and (= Typc2 (_ bv10 32)) (= px3 px2))) false) (and (= m3 m2) (= Txpc3 Txpc2))) (or (and (and (and Ty2 (and (= Typc2 (_ bv11 32)) (and m2 (= px3 px2)))) (= Typc3 (_ bv12 32))) (and (= m3 false) (= Txpc3 Txpc2))) (and (and (and Ty2 (and (= Typc2 (_ bv12 32)) (= px3 px2))) false) (and (= m3 m2) (= Txpc3 Txpc2))))))))))))))) (and (and (xor Tx3 Ty3) (or (and (and (and Tx3 (and (= Txpc3 (_ bv1 32)) (and (= m3 false) (= px4 px3)))) (= Txpc4 (_ bv2 32))) (and m4 (= Typc4 Typc3))) (or (and (and (and Tx3 (and (= Txpc3 (_ bv2 32)) (and (= x0 (_ bv3 32)) (= px4 (_ bv2 32))))) (= Txpc4 (_ bv3 32))) (and (= m4 m3) (= Typc4 Typc3))) (or (and (and (and Tx3 (and (= Txpc3 (_ bv3 32)) (and m3 (= px4 px3)))) (= Txpc4 (_ bv4 32))) (and (= m4 false) (= Typc4 Typc3))) (or (and (and (and Tx3 (and (= Txpc3 (_ bv4 32)) (= px4 px3))) false) (and (= m4 m3) (= Typc4 Typc3))) (or (and (and (and Ty3 (and (= Typc3 (_ bv5 32)) (and (= m3 false) (= px4 px3)))) (= Typc4 (_ bv6 32))) (and m4 (= Txpc4 Txpc3))) (or (and (and (and Ty3 (and (= Typc3 (_ bv6 32)) (and (or (and (= px3 lx) (= Tytmp1 x)) (and (= px3 (_ bv2 32)) (= Tytmp1 x0))) (= px4 px3)))) (= Typc4 (_ bv7 32))) (and (= m4 m3) (= Txpc4 Txpc3))) (or (and (and (and Ty3 (and (= Typc3 (_ bv7 32)) (and (= Tytmp2 (= Tytmp1 (_ bv2 32))) (= px4 px3)))) (= Typc4 (_ bv8 32))) (and (= m4 m3) (= Txpc4 Txpc3))) (or (and (and (and Ty3 (and (= Typc3 (_ bv8 32)) (= px4 px3))) (or (and Tytmp2 (= Typc4 (_ bv11 32))) (and (not Tytmp2) (= Typc4 (_ bv9 32))))) (and (= m4 m3) (= Txpc4 Txpc3))) (or (and (and (and Ty3 (= Typc3 (_ bv9 32))) (= Typc4 (_ bv10 32))) (and (= m4 m3) (= Txpc4 Txpc3))) (or (and (and (and Ty3 (and (= Typc3 (_ bv10 32)) (= px4 px3))) false) (and (= m4 m3) (= Txpc4 Txpc3))) (or (and (and (and Ty3 (and (= Typc3 (_ bv11 32)) (and m3 (= px4 px3)))) (= Typc4 (_ bv12 32))) (and (= m4 false) (= Txpc4 Txpc3))) (and (and (and Ty3 (and (= Typc3 (_ bv12 32)) (= px4 px3))) false) (and (= m4 m3) (= Txpc4 Txpc3))))))))))))))) (and (and (xor Tx4 Ty4) (or (and (and (and Tx4 (and (= Txpc4 (_ bv1 32)) (and (= m4 false) (= px5 px4)))) (= Txpc5 (_ bv2 32))) (and m5 (= Typc5 Typc4))) (or (and (and (and Tx4 (and (= Txpc4 (_ bv2 32)) (and (= x0 (_ bv3 32)) (= px5 (_ bv2 32))))) (= Txpc5 (_ bv3 32))) (and (= m5 m4) (= Typc5 Typc4))) (or (and (and (and Tx4 (and (= Txpc4 (_ bv3 32)) (and m4 (= px5 px4)))) (= Txpc5 (_ bv4 32))) (and (= m5 false) (= Typc5 Typc4))) (or (and (and (and Tx4 (and (= Txpc4 (_ bv4 32)) (= px5 px4))) false) (and (= m5 m4) (= Typc5 Typc4))) (or (and (and (and Ty4 (and (= Typc4 (_ bv5 32)) (and (= m4 false) (= px5 px4)))) (= Typc5 (_ bv6 32))) (and m5 (= Txpc5 Txpc4))) (or (and (and (and Ty4 (and (= Typc4 (_ bv6 32)) (and (or (and (= px4 lx) (= Tytmp1 x)) (and (= px4 (_ bv2 32)) (= Tytmp1 x0))) (= px5 px4)))) (= Typc5 (_ bv7 32))) (and (= m5 m4) (= Txpc5 Txpc4))) (or (and (and (and Ty4 (and (= Typc4 (_ bv7 32)) (and (= Tytmp2 (= Tytmp1 (_ bv2 32))) (= px5 px4)))) (= Typc5 (_ bv8 32))) (and (= m5 m4) (= Txpc5 Txpc4))) (or (and (and (and Ty4 (and (= Typc4 (_ bv8 32)) (= px5 px4))) (or (and Tytmp2 (= Typc5 (_ bv11 32))) (and (not Tytmp2) (= Typc5 (_ bv9 32))))) (and (= m5 m4) (= Txpc5 Txpc4))) (or (and (and (and Ty4 (= Typc4 (_ bv9 32))) (= Typc5 (_ bv10 32))) (and (= m5 m4) (= Txpc5 Txpc4))) (or (and (and (and Ty4 (and (= Typc4 (_ bv10 32)) (= px5 px4))) false) (and (= m5 m4) (= Txpc5 Txpc4))) (or (and (and (and Ty4 (and (= Typc4 (_ bv11 32)) (and m4 (= px5 px4)))) (= Typc5 (_ bv12 32))) (and (= m5 false) (= Txpc5 Txpc4))) (and (and (and Ty4 (and (= Typc4 (_ bv12 32)) (= px5 px4))) false) (and (= m5 m4) (= Txpc5 Txpc4))))))))))))))) (and (and (xor Tx5 Ty5) (or (and (and (and Tx5 (and (= Txpc5 (_ bv1 32)) (and (= m5 false) (= px6 px5)))) (= Txpc6 (_ bv2 32))) (and m6 (= Typc6 Typc5))) (or (and (and (and Tx5 (and (= Txpc5 (_ bv2 32)) (and (= x0 (_ bv3 32)) (= px6 (_ bv2 32))))) (= Txpc6 (_ bv3 32))) (and (= m6 m5) (= Typc6 Typc5))) (or (and (and (and Tx5 (and (= Txpc5 (_ bv3 32)) (and m5 (= px6 px5)))) (= Txpc6 (_ bv4 32))) (and (= m6 false) (= Typc6 Typc5))) (or (and (and (and Tx5 (and (= Txpc5 (_ bv4 32)) (= px6 px5))) false) (and (= m6 m5) (= Typc6 Typc5))) (or (and (and (and Ty5 (and (= Typc5 (_ bv5 32)) (and (= m5 false) (= px6 px5)))) (= Typc6 (_ bv6 32))) (and m6 (= Txpc6 Txpc5))) (or (and (and (and Ty5 (and (= Typc5 (_ bv6 32)) (and (or (and (= px5 lx) (= Tytmp1 x)) (and (= px5 (_ bv2 32)) (= Tytmp1 x0))) (= px6 px5)))) (= Typc6 (_ bv7 32))) (and (= m6 m5) (= Txpc6 Txpc5))) (or (and (and (and Ty5 (and (= Typc5 (_ bv7 32)) (and (= Tytmp2 (= Tytmp1 (_ bv2 32))) (= px6 px5)))) (= Typc6 (_ bv8 32))) (and (= m6 m5) (= Txpc6 Txpc5))) (or (and (and (and Ty5 (and (= Typc5 (_ bv8 32)) (= px6 px5))) (or (and Tytmp2 (= Typc6 (_ bv11 32))) (and (not Tytmp2) (= Typc6 (_ bv9 32))))) (and (= m6 m5) (= Txpc6 Txpc5))) (or (and (and (and Ty5 (= Typc5 (_ bv9 32))) (= Typc6 (_ bv10 32))) (and (= m6 m5) (= Txpc6 Txpc5))) (or (and (and (and Ty5 (and (= Typc5 (_ bv10 32)) (= px6 px5))) false) (and (= m6 m5) (= Txpc6 Txpc5))) (or (and (and (and Ty5 (and (= Typc5 (_ bv11 32)) (and m5 (= px6 px5)))) (= Typc6 (_ bv12 32))) (and (= m6 false) (= Txpc6 Txpc5))) (and (and (and Ty5 (and (= Typc5 (_ bv12 32)) (= px6 px5))) false) (and (= m6 m5) (= Txpc6 Txpc5))))))))))))))) (and (xor Tx6 Ty6) (or (and Tx6 (and (= Txpc6 (_ bv1 32)) (= m6 false))) (or (and Tx6 (and (= Txpc6 (_ bv2 32)) (= x0 (_ bv3 32)))) (or (and Tx6 (and (= Txpc6 (_ bv3 32)) m6)) (or (and (and Tx6 (= Txpc6 (_ bv4 32))) false) (or (and Ty6 (and (= Typc6 (_ bv5 32)) (= m6 false))) (or (and Ty6 (and (= Typc6 (_ bv6 32)) (or (and (= px6 lx) (= Tytmp1 x)) (and (= px6 (_ bv2 32)) (= Tytmp1 x0))))) (or (and Ty6 (and (= Typc6 (_ bv7 32)) (= Tytmp2 (= Tytmp1 (_ bv2 32))))) (or (and Ty6 (= Typc6 (_ bv8 32))) (or (and Ty6 (= Typc6 (_ bv9 32))) (or (and (and Ty6 (= Typc6 (_ bv10 32))) false) (or (and Ty6 (and (= Typc6 (_ bv11 32)) m6)) (and (and Ty6 (= Typc6 (_ bv12 32))) false))))))))))))))))))) (or (= Txpc0 (_ bv9 32)) (or (= Typc0 (_ bv9 32)) (or (= Txpc1 (_ bv9 32)) (or (= Typc1 (_ bv9 32)) (or (= Txpc2 (_ bv9 32)) (or (= Typc2 (_ bv9 32)) (or (= Txpc3 (_ bv9 32)) (or (= Typc3 (_ bv9 32)) (or (= Txpc4 (_ bv9 32)) (or (= Typc4 (_ bv9 32)) (or (= Txpc5 (_ bv9 32)) (or (= Typc5 (_ bv9 32)) (or (= Txpc6 (_ bv9 32)) (= Typc6 (_ bv9 32)))))))))))))))))))
(check-sat)
(exit)
