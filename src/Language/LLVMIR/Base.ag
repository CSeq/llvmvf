{
-------------------------------------------------------------------------------
-- Module    :  Language.LLVMIR.Base
-- Copyright :  (c) 2012 Marcelo Sousa
-------------------------------------------------------------------------------
}

module {Language.LLVMIR.Base}{}{}

imports 
{
import Prelude              hiding (sequence)
import Data.Char            (chr)
}

-------------------------------------------------------------------------------
-- Module - LLVM IR Module
-------------------------------------------------------------------------------

type Id = (String)
type Label = (Int)
type MLabel = maybe Label

type Functions = [Function]
type GlobalVars = [GlobalVar]
type Identifiers = [Identifier]
type Arguments = [Argument]
type FuncAttrs = [FunAttr]
type BasicBlocks = [BasicBlock]
type Instructions = [Instruction]

type MLinkageTy = maybe LinkageTy
type MVisibility = maybe Visibility
type MCConv = maybe CConv
type MUnnamedAddr = maybe Bool -- maybe () would be better
type MParamAttrs = maybe [ParamAttr]
type MAlign = maybe Align
type MGCName = maybe GCName
type MModuleAsms = maybe [ModuleAsm]
type MSection = maybe Section
type MNamedTys = maybe [NamedTy]
type MAliases = maybe [Alias]

data Identifier 
      | Global name :: String -- (functions, global variables) begin with the '@'
      | Local  name :: String -- (register names, types) begin with the '%'

data Module 
      | Module 
          funs  :: Functions
          gvars :: GlobalVars
          namedty :: MNamedTys
          aliases :: MAliases
--          symbtbl :: {[SymbolTableEntry]}
--          namedm :: NamedMetadata
--          mdlasm :: MModuleAsms

data ModuleAsm
      | ModuleAsm asm :: String
      
data NamedTy 
      | NamedTy 
          name :: Id
          ty   :: Type

data GlobalVar 
      | GlobalVar 
          name :: Id
          
--          LinkageTy DefinitionTy MUnnamedAddr Id

data Function 
      | FunctionDef 
          linkage    :: MLinkageTy
          visibility :: MVisibility
          cconv      :: MCConv
          uaddr      :: MUnnamedAddr
          retty      :: Type
          paramattr  :: MParamAttrs
          name       :: Id
          args       :: Arguments
          fnAttrs    :: FuncAttrs
          section    :: MSection
          optAlign   :: MAlign
          gcName     :: MGCName
          bb         :: BasicBlocks
      | FunctionDecl
          linkage    :: MLinkageTy
          visibility :: MVisibility
          cconv      :: MCConv
          uaddr      :: MUnnamedAddr
          retty      :: Type
          paramattr  :: MParamAttrs
          name       :: Id
          args       :: Arguments
          optAlign   :: MAlign          
          gcName     :: MGCName
          
data BasicBlock
      | BasicBlock 
          label  :: MLabel
          instrs :: Instructions
          tmn    :: Terminator

data Terminator
      | Terminator
      
data Instruction
      | Instruction
      
data Align
      | Align n :: Int

data Section
      | Section s :: String
      
data Type
      | Intz
      
data Argument
      | Argument

-- Parameter Attributes      
data ParamAttr
      | Zeroext
      | Signext
      | Inreg
      | Byval
      | Sret
      | Noalias
      | Nocapture
      | Nest

-- Garbage Collector Names   
data GCName
      | GCName name :: String

-- Function Attributes
data FunAttr
      | AddressSafety
      | Alignstack n :: Int
      | Alwaysinline
      | Nonlazybind
      | Inlinehint
      | Naked
      | Noimplicitfloat
      | Noinline
      | Noredzone
      | Noreturn
      | Nounwind
      | Optsize
      | Readnone
      | Readonly
      | ReturnsTwice
      | Ssp
      | Sspreq
      | Uwtable
      
--  All Global Variables and Functions have one of the following types of linkage.
data LinkageTy 
      | Private
      | LinkerPrivate
      | LinkerPrivateWeak
      | LinkerPrivateWeakDefAuto
      | Internal
      | AvailableExternally
      | Linkonce
      | Weak
      | Common
      | Appending
      | ExternWeak
      | LinkonceOdr
      | WeakOdr
      | External
      | Dllimport
      | Dllexport 

-- Call Convention
-- LLVM functions, calls and invokes can all have an optional calling convention specified for the call.
data CConv 
      | Ccc    -- The C calling convention
      | Fastcc -- The fast calling convention
      | Coldcc -- The cold calling convention
      | Cc10   -- GHC convention
      | Cc n :: Int -- Numbered convention

-- All Global Variables and Functions have one of the following visibility styles.
data Visibility 
      | Default
      | Hidden
      | Protected
                       
data DefinitionTy
      | ThreadLocal
      | Constant

data Alias
      | Alias 
          name       :: Id
          linkage    :: MLinkageTy
          visibility :: MVisibility
          aliaseeTy  :: Type
          aliasee    :: Id
  
set Every = Module GlobalVar Function LinkageTy CConv Visibility DefinitionTy LocalVar Type ParamAttribute Argument Align GCName FunAttr BasicBlock Instruction Terminator

deriving Every: Show
deriving Every: Eq
