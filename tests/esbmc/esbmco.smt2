(set-logic QF_AUFBV)
(set-option :produce-models true)
(declare-fun j () (_ BitVec 32))
(assert (= j (_ bv1 32)))
(declare-fun x () (_ BitVec 32))
(assert (= x (_ bv2 32)))
(declare-fun i () (_ BitVec 32))
(assert (= i (_ bv0 32)))
(declare-fun .str () (Array (_ BitVec 4) (_ BitVec 8)))
(declare-fun .str1 () (Array (_ BitVec 4) (_ BitVec 8)))
(declare-fun __PRETTY_FUNCTION__.Tx () (Array (_ BitVec 5) (_ BitVec 8)))
(declare-fun a () (Array (_ BitVec 4) (_ BitVec 32)))
(declare-fun Txtmp () (_ BitVec 32))
(declare-fun Txtmp1 () Bool)
(declare-fun Txtmp10 () (_ BitVec 32))
(declare-fun Txtmp3 () (_ BitVec 32))
(declare-fun Txtmp4 () Bool)
(declare-fun Txtmp7 () (_ BitVec 32))
(declare-fun Txtmp8 () (_ BitVec 32))
(declare-fun Txtmp9 () (_ BitVec 64))
(declare-fun Tytmp () (_ BitVec 32))
(declare-fun Tytmp1 () Bool)
(declare-fun Tytmp3 () (_ BitVec 32))
(declare-fun Tytmp4 () (_ BitVec 32))
(declare-fun Tytmp5 () (_ BitVec 32))
(declare-fun Tytmp6 () (_ BitVec 64))
(declare-fun Tytmp7 () (_ BitVec 32))
(declare-fun mainarg1 () (_ BitVec 32))
(declare-fun mainarg2 () (_ BitVec 32))
(declare-fun mainid1 () (_ BitVec 64))
(declare-fun mainid2 () (_ BitVec 64))
(declare-fun maintmp () (_ BitVec 32))
(declare-fun maintmp1 () (_ BitVec 8))
(declare-fun maintmp3 () (_ BitVec 8))
(assert (= (_ bv10 32) mainarg1))
(assert (= (_ bv20 32) mainarg2))
(assert (= maintmp i))
(assert (= maintmp1 ((_ extract 7 0) mainarg1)))
(check-sat)
(exit)
