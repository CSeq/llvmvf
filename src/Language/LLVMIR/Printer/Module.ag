{
-------------------------------------------------------------------------------
-- Module    :  Language.LLVMIR.Printer
-- Copyright :  (c) 2012 Marcelo Sousa
-------------------------------------------------------------------------------
}

module {Language.LLVMIR.Printer.Module}{}{}

include "Base.ag"
include "Type.ag"

imports 
{
import UU.PPrint as P
import Language.LLVMIR
}

attr Parameters Types Values PValues PValue Ints
  syn pp :: {Doc}

sem Parameters Types Values PValues 
  | Nil  lhs.pp = P.empty
  | Cons lhs.pp = if (length @tl.self == 0)
                  then @hd.pp
                  else @hd.pp <> char ',' <+> @tl.pp

sem Ints
  | Nil lhs.pp = P.empty
  | Cons lhs.pp = if (length @tl.self == 0)
                  then int @hd
                  else int @hd <> char ',' <+> @tl.pp
sem PValue
  | Tuple lhs.pp = char '[' <+> @x1.pp <> char ',' <+> @x2.pp <+> char ']'

attr Module Identifier TargetData DataLayout Functions Globals Global Linkage Align MValue Value Type TyFloatPoint Function Aliases Alias Parameter BasicBlocks BasicBlock Instructions Instruction IntPredicate RealPredicate NamedTypes Constant GlobalValue ConstantDataSequential ConstantExpr CompareConstantExpr ConstantFP RetInst BinOp AtomicOrdering
  syn pp use {<$>} {P.empty} :: {Doc}

attr Target 
  syn pp :: {Doc}

sem Identifier
  | Global lhs.pp = char '@' <> text @name.self
  | Local  lhs.pp = char '%' <> text @name.self 

sem DataLayout
  | DataLayout
     lhs.pp = text "target datalayout =" <+> dquotes (Prelude.foldr1 (\x y -> x <> char '-' <> y) (Prelude.map text @s.self))

sem TargetData
  | TargetData
      lhs.pp = text "target triple =" <+> dquotes (text @s)

sem Target
  | MacOs lhs.pp = text "MacOs"
  | Linux lhs.pp = text "Linux"

sem Module
  | Module lhs.pp = text ("; ModuleID ='" ++ @id ++ "'") <$> @layout.pp <$> @target.pp <$> P.empty <$>  @nmdtys.pp <$> @gvars.pp <$> @funs.pp 

sem Global
  | GlobalVar lhs.pp = text "@" <> text @name.self <+> text "=" <+>  @linkage.pp <+> ppKeyword @isUaddr "unnamed_addr" <+> ppKeyword @isConst "constant" <+> text "," <+> @ival.pp <> text "," <+> @align.pp 

sem Function
  | FunctionDef  lhs.pp = text "define"  <+> @linkage.pp <+> @retty.pp <+> char '@' <> text @name.self <> parens @params.pp <> char '{' <$> @body.pp <$> char '}'
  | FunctionDecl lhs.pp = text "declare" <+> @linkage.pp <+> @retty.pp <+> char '@' <> text @name.self <> parens @params.pp

sem Parameter
  | Parameter lhs.pp = @ty.pp <> ppPName @var.self

sem BasicBlock
  | BasicBlock lhs.pp = text "; <label>:" <> text @label.self <$> @instrs.pp

sem RetInst
  | ValueRet lhs.pp = @v.pp
  | VoidRet  lhs.pp = text "void"

sem Instruction
  | Ret Alloca Load Store ICmp FCmp UBr Br Call Unreachable Trunc ZExt SExt FPToUI FPToSI UIToFP SIToFP FPTrunc FPExt PtrToInt IntToPtr BitCast GetElementPtr Add FAdd Sub FSub Mul FMul UDiv SDiv FDiv URem SRem FRem Shl LShr AShr And Or Xor PHI Select ExtractValue InsertValue AtomicRMW Cmpxchg CreateThread MutexInit MutexLock MutexUnlock
           lhs.pp = @pp
  | Ret    loc.pp = text "ret" <+> @r.pp 
  | Alloca loc.pp = @id.pp <+> char '=' <+> text "alloca" <+> @ty.pp <> char ',' <+> @align.pp
  | Load   loc.pp = @id.pp <+> char '=' <+> text "load"   <+> @v.pp  <> char ',' <+> @align.pp
  | Store  loc.pp = @ty.pp <+> text "store" <+> @v1.pp <> char ',' <+> @v2.pp <> char ',' <+> @align.pp
  | ICmp   loc.pp = @id.pp <+> char '=' <+> text "icmp"   <+> @cond.pp <+> @op1.pp <> char ',' <+> @op2.pp
  | FCmp   loc.pp = @id.pp <+> char '=' <+> text "icmp"   <+> @cond.pp <+> @op1.pp <> char ',' <+> @op2.pp
  | UBr    loc.pp = text "br" <+> @d.pp
  | Br     loc.pp = text "br" <+> @v.pp <> comma <+> @t.pp <> comma <+> @f.pp
  | Call   loc.pp = @mres.pp <+> char '=' <+> text "call" <+> @ty.pp <+> char '@' <> text @callee <> char '(' <> @args.pp <> char ')'
  | Unreachable loc.pp = text "unreachable"
  | Trunc    loc.pp = pConvOp @id.pp "trunc"    @v.pp @ty.pp
  | ZExt     loc.pp = pConvOp @id.pp "zext"     @v.pp @ty.pp
  | SExt     loc.pp = pConvOp @id.pp "sext"     @v.pp @ty.pp
  | FPToUI   loc.pp = pConvOp @id.pp "fptoui"   @v.pp @ty.pp
  | FPToSI   loc.pp = pConvOp @id.pp "fptosi"   @v.pp @ty.pp
  | UIToFP   loc.pp = pConvOp @id.pp "uitofp"   @v.pp @ty.pp
  | SIToFP   loc.pp = pConvOp @id.pp "sitofp"   @v.pp @ty.pp
  | FPTrunc  loc.pp = pConvOp @id.pp "fptrunc"  @v.pp @ty.pp
  | FPExt    loc.pp = pConvOp @id.pp "fpext"    @v.pp @ty.pp
  | PtrToInt loc.pp = pConvOp @id.pp "ptrtoint" @v.pp @ty.pp
  | IntToPtr loc.pp = pConvOp @id.pp "inttoptr" @v.pp @ty.pp
  | BitCast  loc.pp = pConvOp @id.pp "bitcast"  @v.pp @ty.pp
  | GetElementPtr loc.pp = @id.pp <+> char '=' <+> text "getelementptr" <+> @struct.pp <> char ',' <+> @idxs.pp
  | Add  loc.pp = pBinOp @ty.pp @id.pp "add"  @op1.pp @op2.pp
  | FAdd loc.pp = pBinOp @ty.pp @id.pp "fadd" @op1.pp @op2.pp
  | Sub  loc.pp = pBinOp @ty.pp @id.pp "sub"  @op1.pp @op2.pp
  | FSub loc.pp = pBinOp @ty.pp @id.pp "fsub" @op1.pp @op2.pp
  | Mul  loc.pp = pBinOp @ty.pp @id.pp "mul"  @op1.pp @op2.pp
  | FMul loc.pp = pBinOp @ty.pp @id.pp "fmul" @op1.pp @op2.pp
  | UDiv loc.pp = pBinOp @ty.pp @id.pp "udiv" @op1.pp @op2.pp
  | SDiv loc.pp = pBinOp @ty.pp @id.pp "sdiv" @op1.pp @op2.pp
  | FDiv loc.pp = pBinOp @ty.pp @id.pp "fdiv" @op1.pp @op2.pp
  | URem loc.pp = pBinOp @ty.pp @id.pp "urem" @op1.pp @op2.pp
  | SRem loc.pp = pBinOp @ty.pp @id.pp "srem" @op1.pp @op2.pp
  | FRem loc.pp = pBinOp @ty.pp @id.pp "frem" @op1.pp @op2.pp
  | Shl  loc.pp = pBitBinOp @ty.pp @id.pp "shl"  @op1.pp @op2.pp
  | LShr loc.pp = pBitBinOp @ty.pp @id.pp "lshr" @op1.pp @op2.pp
  | AShr loc.pp = pBitBinOp @ty.pp @id.pp "ashr" @op1.pp @op2.pp
  | And  loc.pp = pBitBinOp @ty.pp @id.pp "and"  @op1.pp @op2.pp
  | Or   loc.pp = pBitBinOp @ty.pp @id.pp "or"   @op1.pp @op2.pp
  | Xor  loc.pp = pBitBinOp @ty.pp @id.pp "xor"  @op1.pp @op2.pp
  | PHI  loc.pp = @id.pp <+> char '=' <+> text "phi" <+> @ty.pp <+> @vals.pp
  | Select loc.pp = @id.pp <+> char '=' <+> @cond.pp <> char ',' <+> @valt.pp <> char ',' <+> @valf.pp
  | ExtractValue loc.pp = @id.pp <+> char '=' <+> text "extractvalue" <+> @aggr.pp <> char ',' <+> @idxs.pp
  | InsertValue loc.pp = @id.pp <+> char '=' <+> text "insertvalue" <+> @aggr.pp <> char ',' <+> @ival.pp <> char ',' <+> @idxs.pp
  | Cmpxchg loc.pp = @id.pp <+> char '=' <+> text "cmpxchg" <+> @mptr.pp <+> @cval.pp <+> @nval.pp <+> @ord.pp
  | AtomicRMW loc.pp = @id.pp <+> char '=' <+> text "atomicrmw" <+> @op.pp <+>  @args.pp  <+> @ord.pp
  | CreateThread loc.pp = text "create_thread" <+> parens @args.pp
  | MutexInit    loc.pp = text "mutex_init"    <+> @mutex.pp 
  | MutexLock    loc.pp = text "mutex_lock"    <+> @mutex.pp
  | MutexUnlock  loc.pp = text "mutex_unlock"  <+> @mutex.pp
  | WaitEvent    loc.pp = text "wait_event"    <+> int @event
  | NotifyEvent  loc.pp = text "notify_event"  <+> int @event
  | WaitTime     loc.pp = text "wait_time"     <+> @time.pp

{
pConvOp :: Doc -> String -> Doc -> Doc -> Doc
pConvOp id c v ty = id <+> char '=' <+> text c <+> v <+> text "to" <+> ty

pBinOp :: Doc -> Doc -> String -> Doc -> Doc -> Doc
pBinOp ty id c op1 op2 = ty <+> id <+> char '=' <+> text c <+> op1 <> char ',' <+> op2

pBitBinOp :: Doc -> Doc -> String -> Doc -> Doc -> Doc
pBitBinOp ty id c op1 op2 = id <+> char '=' <+> text c <+> ty <+> op1 <> char ',' <+> op2

}
 
sem Alias
  | Alias lhs.pp = text "%" <> text (show @name.self)

sem NamedTypes
  | Nil   lhs.pp = P.empty
  | Entry lhs.pp = @val.pp <$> @tl.pp 

sem Functions
  | Nil   lhs.pp = P.empty
  | Entry lhs.pp = @val.pp <$> @tl.pp

sem BinOp
  | OpXchg  lhs.pp = text "xchg"
  | OpAdd   lhs.pp = text "add"
  | OpSub   lhs.pp = text "sub"
  | OpAnd   lhs.pp = text "and"
  | OpNand  lhs.pp = text "nand"
  | OpOr    lhs.pp = text "or"
  | OpXor   lhs.pp = text "xor"
  | OpMax   lhs.pp = text "max"
  | OpMin   lhs.pp = text "min"
  | OpUMax  lhs.pp = text "umax"
  | OpUMin  lhs.pp = text "umin"

sem AtomicOrdering
  | NotAtomic              lhs.pp = text "non_atomic"
  | Unordered              lhs.pp = text "unordered"
  | Monotonic              lhs.pp = text "monotonic"
  | Acquire                lhs.pp = text "acquire"
  | Release                lhs.pp = text "release"
  | AcquireRelease         lhs.pp = text "acq_rel"
  | SequentiallyConsistent lhs.pp = text "seq_cst"

sem IntPredicate
  | IntEQ  lhs.pp = text "eq" 
  | IntNE  lhs.pp = text "ne" 
  | IntUGT lhs.pp = text "ugt" 
  | IntUGE lhs.pp = text "uge" 
  | IntULT lhs.pp = text "ult" 
  | IntULE lhs.pp = text "ule" 
  | IntSGT lhs.pp = text "sgt" 
  | IntSGE lhs.pp = text "sge" 
  | IntSLT lhs.pp = text "slt" 
  | IntSLE lhs.pp = text "sle" 

sem RealPredicate
  | LLVMRealPredicateFalse lhs.pp = text "false"
  | LLVMRealOEQ            lhs.pp = text "oeq"
  | LLVMRealOGT            lhs.pp = text "ogt"
  | LLVMRealOGE            lhs.pp = text "oge"
  | LLVMRealOLT            lhs.pp = text "olt"
  | LLVMRealOLE            lhs.pp = text "ole"
  | LLVMRealONE            lhs.pp = text "one"
  | LLVMRealORD            lhs.pp = text "ord"
  | LLVMRealUNO            lhs.pp = text "uno"
  | LLVMRealUEQ            lhs.pp = text "ueq"
  | LLVMRealUGT            lhs.pp = text "ugt"
  | LLVMRealUGE            lhs.pp = text "uge"
  | LLVMRealULT            lhs.pp = text "ult"
  | LLVMRealULE            lhs.pp = text "ule"
  | LLVMRealUNE            lhs.pp = text "une"
  | LLVMRealPredicateTrue  lhs.pp = text "true"

sem Linkage
  | ExternalLinkage            lhs.pp = text "external" 
  | AvailableExternallyLinkage lhs.pp = text "available_externally"
  | LinkOnceAnyLinkage         lhs.pp = text "linkonce" 
  | LinkOnceODRLinkage         lhs.pp = text "linkonce_odr" 
  | WeakAnyLinkage             lhs.pp = text "weak" 
  | WeakODRLinkage             lhs.pp = text "weak_odr" 
  | AppendingLinkage           lhs.pp = text "appending"
  | InternalLinkage            lhs.pp = text "internal" 
  | PrivateLinkage             lhs.pp = text "private" 
  | DLLImportLinkage           lhs.pp = text "dllimport" 
  | DLLExportLinkage           lhs.pp = text "dllexport"
  | ExternalWeakLinkage        lhs.pp = text "external"
  | GhostLinkage               lhs.pp = text "ghost" -- ^OBSOLETE
  | CommonLinkage              lhs.pp = text "common"
  | LinkerPrivateLinkage       lhs.pp = text "linker_private"
  | LinkerPrivateWeakLinkage   lhs.pp = text "linker_private_weak"
  | LinkerPrivateWeakDefAutoLinkage lhs.pp = text "linker_private_weak_def_auto" 

sem Align
  | Align lhs.pp = text "align" <+> text (show @n)

sem MValue
  | Nothing lhs.pp = P.empty
  | Just    lhs.pp = @just.pp

sem Value
  | Id       lhs.pp = @ty.pp <+> @v.pp
  | Constant lhs.pp = @c.pp

sem Constant
  | BlockAddr              lhs.pp = text "blockaddr" 
  | ConstantAggregateZero  lhs.pp = @ty.pp <+> text "zeroinitializer"
  | ConstantArray          lhs.pp = @ty.pp <+> brackets @vals.pp
  | ConstantDataSequential lhs.pp = @cds.pp 
  | ConstantExpr           lhs.pp = @expr.pp
  | ConstantFP             lhs.pp = @fp.pp 
  | ConstantInt            lhs.pp = @ty.pp <+> int   @iv
  | ConstantPointerNull    lhs.pp = @ty.pp <+> text "null"
  | ConstantStruct         lhs.pp = @ty.pp <+> braces @vals.pp
  | ConstantVector         lhs.pp = text "ConstantVector"
  | GlobalValue            lhs.pp = @gv.pp
  | UndefValue             lhs.pp = text "undef"

sem ConstantFP
  | ConstantFPFloat  lhs.pp = @ty.pp <+> float @fpv
  | ConstantFPDouble lhs.pp = @ty.pp <+> double @dbv  

sem ConstantDataSequential
  | ConstantDataArray          lhs.pp = @ty.pp <+> text "c" <> dquotes (escaped @val)
  | ConstantDataVector         lhs.pp = @ty.pp <+> text "c" <> dquotes (escaped @val)
                                             
sem ConstantExpr                             
  | BinaryConstantExpr         lhs.pp = text "BinaryConstantExpr"
  | CompareConstantExpr        lhs.pp = @cmpExpr.pp 
  | ExtractElementConstantExpr lhs.pp = text "ExtractElementConstantExpr"
  | ExtractValueConstantExpr   lhs.pp = text "ExtractValueConstantExpr"
  | GetElementPtrConstantExpr  lhs.pp = text "getelementptr" <> parens (@struct.pp <> char ',' <+> @idxs.pp) 
  | InsertElementConstantExpr  lhs.pp = text "InsertElementConstantExpr"
  | InsertValueConstantExpr    lhs.pp = text "InsertValueConstantExpr"
  | SelectConstantExpr         lhs.pp = text "SelectConstantExpr"
  | ShuffleVectorConstantExpr  lhs.pp = text "ShuffleVectorConstantExpr"
  | UnaryConstantExpr          lhs.pp = @ty.pp <+> text @name <+> @val.pp

sem CompareConstantExpr
  | ICmpExpr   lhs.pp = text "icmp"   <+> @cond.pp <+> @op1.pp <> char ',' <+> @op2.pp
  | FCmpExpr   lhs.pp = text "icmp"   <+> @cond.pp <+> @op1.pp <> char ',' <+> @op2.pp

sem GlobalValue
  | FunctionValue  lhs.pp = @ty.pp <+> @n.pp 
  | GlobalAlias    lhs.pp = @ty.pp <+> @n.pp 
  | GlobalVariable lhs.pp = @ty.pp <+> @n.pp 

sem Type
  | TyVoid       lhs.pp = text "void"
  | Tyx86MMX     lhs.pp = text "x86mmx" 
  | TyLabel      lhs.pp = text "label"
  | TyMetadata   lhs.pp = text "metadata" 
  | TyOpaque     lhs.pp = text "opaque"
  | TyInt        lhs.pp = char 'i' <> int @p 
  | TyFloatPoint lhs.pp = @p.pp
  | TyArray      lhs.pp = brackets $ int @numEl <+> char 'x' <+> @ty.pp
  | TyFunction   lhs.pp = parens $ @party.pp <+> text "->" <+> @retty.pp 
  | TyStruct     lhs.pp = char '%' <> text @name <+> int @numEl <+> braces @tys.pp
  | TyPointer    lhs.pp = @ty.pp <> char '*'
  | TyVector     lhs.pp = char '<' <> int @numEl <+> char 'x' <+> @ty.pp <> char '>'
  | TyUndefined  lhs.pp = text "TODO TYPE UNDEFINED"

sem TyFloatPoint
  | TyHalf     lhs.pp = text "half" -- ^ Compatible with i386?
  | TyFloat    lhs.pp = text "float"
  | TyDouble   lhs.pp = text "double"
  | TyFP128    lhs.pp = text "fp128"
  | Tyx86FP80  lhs.pp = text "x86_fp80"
  | TyPPCFP128 lhs.pp = text "ppc_fp128"

{
ppPName :: String -> Doc
ppPName s = if (take 2 s == "0x")
            then P.empty
            else space <> char '%' <> text s

escaped :: String -> Doc
escaped ('\n':xs) = text "\\0A\\00" <> escaped xs
escaped (c:xs)    = char c <> escaped xs
escaped []        = P.empty

ppKeyword :: Bool -> String -> Doc
ppKeyword True s = text s
ppKeyword _    _ = P.empty
}
