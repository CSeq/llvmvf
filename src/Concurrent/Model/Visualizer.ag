optpragmas {
{-#LANGUAGE TypeSynonymInstances, FlexibleInstances #-}
}

{
-------------------------------------------------------------------------------
-- Module    :  Concurrent.Model.Visualizer
-- Copyright :  (c) 2012 Marcelo Sousa
-------------------------------------------------------------------------------
}

module {Concurrent.Model.Visualizer}{}{}

include "Module.ag"

imports{
import qualified Data.Map as M
import qualified Data.IntMap as IM
import Data.Maybe 

import UU.PPrint as P
import Concurrent.Model
import Concurrent.Model.Analysis.ControlFlow (ControlFlow(..))
import Language.LLVMIR
import Language.LLVMIR.Util
}

attr PValues PValue 
  syn ppccfg :: {Doc}

sem PValues
  | Nil  lhs.ppccfg = P.empty
  | Cons lhs.ppccfg = if (length @tl.self == 0)
                      then @hd.ppccfg
                      else @hd.ppccfg <> char ',' <+> @tl.ppccfg

sem PValue
  | Tuple lhs.ppccfg = char '(' <+> @x1.ppccfg <> char ',' <+> @x2.ppccfg <+> char ')'

attr Functions Function BasicBlocks BasicBlock
  chn ilabel :: {ILabel}

attr Function BasicBlocks BasicBlock Instructions Instruction Identifier Value Constant GlobalValue
  syn ppccfg use {<$>} {P.empty} :: {Doc}

sem BasicBlocks BasicBlock
  inh fname :: {String}

sem Module
  | Module
      funs.ilabel = 0

sem Functions
  | Entry
      val.ilabel = @lhs.ilabel

sem Function
  | FunctionDecl lhs.ppccfg = P.empty
  | FunctionDef
      lhs.ppccfg = text "subgraph cluster_" <> @name.ppccfg <+> text "{" </>
                   text "style=filled;" </>
                   text "color=lightblue;" </>
                   @body.ppccfg </>
                   text "label = \"function" <+> @name.ppccfg <> text "\"; }"
      loc.ilabel :: uniqueref ilabel
      body.fname = case @name.self of 
                     Global x -> x
                     Local  y -> error "Visualizer: Function should always be a Global"

sem BasicBlock
  | BasicBlock
      lhs.ppccfg = text "subgraph cluster_" <> text @lhs.fname <> int @ilabel <+> text "{" </>
                   text "style=filled;" </>
                   text "color=gray;" </>
                   @instrs.ppccfg </>
                   text "label = \"basic block" <+> @label.pp <> text "\"; }"
      loc.ilabel :: uniqueref ilabel

sem Identifier
  | Local  lhs.ppccfg = text @name.self
  | Global lhs.ppccfg = text @name.self

sem Instruction
  | Ret Alloca Load Store ICmp FCmp UBr Br Unreachable Trunc ZExt SExt FPToUI FPToSI UIToFP SIToFP FPTrunc FPExt PtrToInt IntToPtr BitCast Add FAdd Sub FSub Mul FMul UDiv SDiv FDiv URem SRem FRem Shl LShr AShr And Or Xor Select ExtractValue AtomicRMW 
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self @pp
  | PHI  loc.ppccfg = int @pc.self <+> dotLabel @pc.self (@id.pp <+> char '=' <+> text "phi" <+> @vals.ppccfg)
  | GetElementPtr 
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (@id.pp <+> char '=' <+> text "gep" <+>
                                                       @struct.ppccfg <> char ',' <+> @idxs.pp)
  | CreateThread
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "create_thread" <+> 
                                                       parens (pretty (infoValue $ @args.self !! 0)) <+> 
                                                       text (identifierValue $ @args.self !! 2))
  | JoinThread
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "join_thread" <+> @id.ppccfg)
  | ExitThread
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "exit_thread")
  | MutexInit 
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "mutex_init" <+> 
                                                       text (identifierValue @mutex.self))
  | MutexLock 
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "mutex_lock" <+> 
                                                       text (identifierValue @mutex.self))
  | MutexUnlock 
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "mutex_unlock" <+>
                                                       text (identifierValue @mutex.self))
  | MutexDestroy
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "mutex_destroy" <+>
                                                       text (identifierValue @mutex.self))
  | WaitEvent
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "wait_event")
  | WaitTime
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "wait_time")
  | NotifyEvent 
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "notify_event")
  | Call
      lhs.ppccfg = int @pc.self <+> dotLabel @pc.self (text "call" <+> @callee.ppccfg)

sem Value
  | Id       lhs.ppccfg = @v.pp
  | Constant lhs.ppccfg = @c.ppccfg

sem Constant
  | UndefValue   lhs.ppccfg = text "undef"
  | BlockAddr    lhs.ppccfg = text "blockaddr"
  | PoisonValue  lhs.ppccfg = text "poison"
  | SmpConst     lhs.ppccfg = @sc.pp
  | CmpConst     lhs.ppccfg = @cc.pp
  | ConstantExpr lhs.ppccfg = @expr.pp
  | GlobalValue  lhs.ppccfg = @gv.ppccfg

sem GlobalValue
  | FunctionValue  lhs.ppccfg = @n.pp
  | GlobalAlias    lhs.ppccfg = @n.pp
  | GlobalVariable lhs.ppccfg = @n.pp


{
type ILabel = Int

dotLabel :: Int -> Doc -> Doc
dotLabel i d = text "[label=\"" <> int i <+> d <> text "\"];"

dumpccfg :: (Pretty t, SCModel t) => Model t -> ControlFlow -> Doc 
dumpccfg (Model mdl) ccfg = 
    text "digraph structs {" </>
    text "bgcolor=transparent;" </>
    text "node [shape=Mrecord];" </>
    --text "-1 [label=\"||\", shape=Mdiamond];" </>
    vsep (Prelude.map dotFunction $ M.elems $ getModFns mdl) </>
    vsep (Prelude.map pretty ccfg) </>
    text "}"

dotFunction :: Function -> Doc
dotFunction f = ppccfg_Syn_Function $ wrap_Function (sem_Function f) $ Inh_Function { ilabel_Inh_Function = 0 }

}
