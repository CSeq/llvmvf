{
-------------------------------------------------------------------------------
-- Module    :  Concurrent.Model.Analysis.Util
-- Copyright :  (c) 2013 Marcelo Sousa
-------------------------------------------------------------------------------
}

module {Concurrent.Model.Analysis.Util}{}{}

include "Base.ag"

imports{
import qualified Data.Map as Map
import qualified Data.IntMap as IM
import Data.Maybe

import Language.LLVMIR
import Language.Asm (Asm, AsmC)
}

attr Instruction PHI Terminator
  syn entryPC:: {PC}

sem Instruction PHI Terminator
  | * lhs.entryPC= @pc.self

{

entryPCFunction :: Function -> Maybe PC
entryPCFunction fn = case fn of
  FunctionDecl name _ rty iv pms -> Nothing
  FunctionDef  name _ rty iv pms bbs -> 
    Just $ entryPC $ head bbs

entryBBFunction :: Function -> Maybe Identifier
entryBBFunction fn = case fn of
  FunctionDecl name _ rty iv pms -> Nothing
  FunctionDef  name _ rty iv pms bbs -> 
    case bbs of
     [] -> Nothing
     ((BasicBlock i _ _ _):_) -> Just i

class EntryPC a where
  entryPC :: a -> PC

instance EntryPC PHI where
  entryPC a = entryPC_Syn_PHI $ wrap_PHI (sem_PHI a) $ Inh_PHI { }

instance EntryPC Instruction where
  entryPC a = entryPC_Syn_Instruction $ wrap_Instruction (sem_Instruction a) $ Inh_Instruction { }

instance EntryPC Terminator where
  entryPC a = entryPC_Syn_Terminator $ wrap_Terminator (sem_Terminator a) $ Inh_Terminator { }

instance EntryPC BasicBlock where
  entryPC bb = case bb of
    BasicBlock _ [] [] tmn       -> entryPC tmn
    BasicBlock _ [] instrs tmn   -> entryPC $ head instrs
    BasicBlock _ phis instrs tmn -> entryPC $ head phis
}
