; ModuleID ='esbmco.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"union.pthread_attr_t" 2 {i64, [48 x i8]}

@j = external  constant , i32 1, align 4
@x = external  constant , i32 2, align 4
@i = common  constant , i32 0, align 4
@.str = private unnamed_addr constant , [13 x i8] c"i>=0 && i<10", align 1
@.str1 = private unnamed_addr constant , [8 x i8] c"esbmc.c", align 1
@__PRETTY_FUNCTION__.Tx = private unnamed_addr constant , [17 x i8] c"void *Tx(void *)", align 1
@a = common  constant , [10 x i32] zeroinitializer, align 16

define external i8* @Tx(i8* %arg){
; <label>:bb
%tmp = load i32* @x, align 4
%tmp1 = icmp sgt i32 %tmp, i32 3
br i1 %tmp1, label %bb2, label %bb11

; <label>:bb2
%tmp3 = load i32* @i, align 4
%tmp4 = icmp ult i32 %tmp3, i32 10
br i1 %tmp4, label %bb6, label %bb5

; <label>:bb5
% = call void @__assert_fail(getelementptr([13 x i8]* @.str, i64 0, i64 0), getelementptr([8 x i8]* @.str1, i64 0, i64 0), i32 12, getelementptr([17 x i8]* @__PRETTY_FUNCTION__.Tx, i64 0, i64 0))
unreachable

; <label>:bb6
%tmp7 = bitcast i8* %arg to i32*
%tmp8 = load i32* %tmp7, align 4
%tmp9 = sext i32 %tmp3 to i64
%tmp10 = getelementptr [10 x i32]* @a, i64 0, i64 %tmp9
void store i32 %tmp8, i32* %tmp10, align 4
br label %bb11

; <label>:bb11
ret undef


}
define external i8* @Ty(i8* %arg){
; <label>:bb
%tmp = load i32* @x, align 4
%tmp1 = icmp sgt i32 %tmp, i32 3
br i1 %tmp1, label %bb2, label %bb8

; <label>:bb2
%tmp3 = bitcast i8* %arg to i32*
%tmp4 = load i32* %tmp3, align 4
%tmp5 = load i32* @j, align 4
%tmp6 = sext i32 %tmp5 to i64
%tmp7 = getelementptr [10 x i32]* @a, i64 0, i64 %tmp6
void store i32 %tmp4, i32* %tmp7, align 4
br label %bb9

; <label>:bb8
void store i32 3, i32* @x, align 4
br label %bb9

; <label>:bb9
ret undef


}
define external i8* @Tz(i8* %arg){
; <label>:bb
%tmp = load i32* @x, align 4
%tmp1 = icmp eq i32 %tmp, i32 3
br i1 %tmp1, label %bb2, label %bb3

; <label>:bb2
void store i32 4, i32* @x, align 4
br label %bb3

; <label>:bb3
ret undef


}
declare external void @__assert_fail(i8*, i8*, i32, i8*)
define external i32 @main(){
; <label>:bb
%id1 = alloca i64, align 8
%id2 = alloca i64, align 8
%id3 = alloca i64, align 8
%arg1 = alloca i32, align 4
%arg2 = alloca i32, align 4
void store i32 10, i32* %arg1, align 4
void store i32 20, i32* %arg2, align 4
%tmp = call i32 @nondet_uint()
void store i32 %tmp, i32* @i, align 4
%tmp1 = bitcast i32* %arg1 to i8*
%tmp2 = call i32 @pthread_create(i64* %id1, %"union.pthread_attr_t" 2 {}* null, (i8* -> i8*)* @Tx, i8* %tmp1)
%tmp3 = bitcast i32* %arg2 to i8*
%tmp4 = call i32 @pthread_create(i64* %id2, %"union.pthread_attr_t" 2 {}* null, (i8* -> i8*)* @Ty, i8* %tmp3)
%tmp5 = call i32 @pthread_create(i64* %id3, %"union.pthread_attr_t" 2 {}* null, (i8* -> i8*)* @Tz, i8* %tmp3)
ret i32 0


}
declare external i32 @nondet_uint()
declare external i32 @pthread_create(i64*, %"union.pthread_attr_t" 2 {}*, (i8* -> i8*)*, i8*)
