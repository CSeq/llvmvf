; ModuleID ='mutexo.bc'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.__pthread_internal_list" 2 {%"struct.__pthread_internal_list" 2 {}*, %"struct.__pthread_internal_list" 2 {}*}
%"struct.__pthread_mutex_s" 7 {i32, i32, i32, i32, i32, i32, %"struct.__pthread_internal_list" 2 {}}
%"union.pthread_attr_t" 2 {i64, [48 x i8]}
%"union.pthread_mutex_t" 1 {%"struct.__pthread_mutex_s" 7 {}}
%"union.pthread_mutexattr_t" 1 {i32}

@x = external  constant , i32 2, align 4
@m = common  constant , %"union.pthread_mutex_t" 1 {} zeroinitializer, align 8
@.str = private unnamed_addr constant , [5 x i8] c"x==2", align 1
@.str1 = private unnamed_addr constant , [8 x i8] c"mutex.c", align 1
@__PRETTY_FUNCTION__.Ty = private unnamed_addr constant , [17 x i8] c"void *Ty(void *)", align 1

define external i8* @Tx(i8* %arg){
; <label>:bb
%tmp = call i32 @pthread_mutex_lock(%"union.pthread_mutex_t" 1 {}* @m)
void store i32 3, i32* @x, align 4
%tmp1 = call i32 @pthread_mutex_unlock(%"union.pthread_mutex_t" 1 {}* @m)
ret undef


}
define external i8* @Ty(i8* %arg){
; <label>:bb
%tmp = call i32 @pthread_mutex_lock(%"union.pthread_mutex_t" 1 {}* @m)
%tmp1 = load i32* @x, align 4
%tmp2 = icmp eq i32 %tmp1, i32 2
br i1 %tmp2, label %bb4, label %bb3

; <label>:bb3
% = call void @__assert_fail(getelementptr([5 x i8]* @.str, i64 0, i64 0), getelementptr([8 x i8]* @.str1, i64 0, i64 0), i32 19, getelementptr([17 x i8]* @__PRETTY_FUNCTION__.Ty, i64 0, i64 0))
unreachable

; <label>:bb4
%tmp5 = call i32 @pthread_mutex_unlock(%"union.pthread_mutex_t" 1 {}* @m)
ret undef


}
declare external void @__assert_fail(i8*, i8*, i32, i8*)
define external i32 @main(){
; <label>:bb
%t1 = alloca i64, align 8
%t2 = alloca i64, align 8
%tmp = call i32 @pthread_mutex_init(%"union.pthread_mutex_t" 1 {}* @m, %"union.pthread_mutexattr_t" 1 {}* null)
%tmp1 = call i32 @pthread_create(i64* %t1, %"union.pthread_attr_t" 2 {}* null, (i8* -> i8*)* @Tx, i8* null)
%tmp2 = call i32 @pthread_create(i64* %t2, %"union.pthread_attr_t" 2 {}* null, (i8* -> i8*)* @Ty, i8* null)
ret i32 0


}
declare external i32 @pthread_create(i64*, %"union.pthread_attr_t" 2 {}*, (i8* -> i8*)*, i8*)
declare external i32 @pthread_mutex_init(%"union.pthread_mutex_t" 1 {}*, %"union.pthread_mutexattr_t" 1 {}*)
declare external i32 @pthread_mutex_lock(%"union.pthread_mutex_t" 1 {}*)
declare external i32 @pthread_mutex_unlock(%"union.pthread_mutex_t" 1 {}*)
