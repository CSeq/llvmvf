{
-------------------------------------------------------------------------------
-- Module    :  Language.LLVMIR.Base
-- Copyright :  (c) 2012 Marcelo Sousa
-------------------------------------------------------------------------------
}

module {Language.LLVMIR.Grammar.Base}{}{}

imports 
{
import Prelude              hiding (sequence)
import Data.Char            (chr)
import qualified Data.Map as Data.Map
import qualified Data.Map as Map
#if __GLASGOW_HASKELL__ > 704
import Data.Map hiding (foldr)
#else
import Data.Map 
#endif

}

include "Instruction.ag"

-------------------------------------------------------------------------------
-- Module - LLVM IR Module
-------------------------------------------------------------------------------

type PC = (Int)
type Id = (String)
type Label = (String) 
type MLabel = maybe Label
type MId = maybe Id
type MIdentifier = maybe Identifier

type Functions = map {String} Function
type Globals = [Global]
type Identifiers = [Identifier]
type Arguments = [Argument]
type Parameters = [Parameter]
type Values = [Value]
type FuncAttrs = [FunAttr]
type BasicBlocks = [BasicBlock]
type Instructions = [Instruction]
type Attributes = [Attribute]
type ModuleAsms = [ModuleAsm]
type NamedTypes   = map {Id} Type
type Aliases = [Alias]
type Ints = [Int]

type MLinkageTy = maybe Linkage
type MVisibility = maybe Visibility
type MCConv = maybe CConv
type MUnnamedAddr = maybe Bool -- maybe () would be better
type MConstant = maybe Bool
type MDefinitionTy = maybe DefinitionTy
type MAttributes = maybe Attributes
type MAlign = maybe Align
type MGCName = maybe GCName
type MModuleAsms = maybe ModuleAsms
type MSection = maybe Section
type MValue = maybe Value

type Triplet = (Int, Int, Int)
type MapTyInt = map {Type} Triplet
type PTyInt = (Type, Int)
type PTyIntL = [PTyInt]
type PValue = (Value, Value)
type PValues = [PValue]
type PValueIdx = (Value, Int)
type ValueIdxs = [PValueIdx]

type DLayout = [String]

type IntTyValId = (Type, Value, Identifier)
type IntTyValIdL = [IntTyValId]

data Module
  | Module
    id     :: String
    layout :: DataLayout
    target :: TargetData
    gvars  :: Globals
    funs   :: Functions
    nmdtys :: NamedTypes 
--          aliases :: Aliases
--          symbtbl :: {[SymbolTableEntry]}
--          namedm :: NamedMetadata
--          mdlasm :: MModuleAsms

-- data Endianness
--       | BigEndian
--       | LittleEndian

data DataLayout
  | DataLayout 
      s :: DLayout
--          endianness :: Endianness
--          pointerSize :: Int
--          prefAlignTy :: MapTyInt

data Target
  | MacOs
  | Linux
    
data TargetData
  | TargetData
      s :: String
      t :: Target

data ModuleAsm
  | ModuleAsm asm :: String
      
data Global 
  | GlobalVar 
      name    :: Id
      linkage :: Linkage
      isConst :: Bool
      isUaddr :: Bool 
      ty      :: Type 
      ival    :: MValue
      align   :: Align
--          section  :: MSection

data Function 
  | FunctionDef 
      name    :: Id
      linkage :: Linkage
      retty   :: Type
      params  :: Parameters
      body    :: BasicBlocks 
--          visibility :: MVisibility
--          cconv      :: MCConv
--          uaddr      :: MUnnamedAddr
--          paramattr  :: MAttributes
--          fnAttrs    :: FuncAttrs
--          section    :: MSection
--          optAlign   :: MAlign
--          gcName     :: MGCName
  | FunctionDecl
      name       :: Id
      linkage    :: Linkage
      retty      :: Type
      params     :: Parameters
--          visibility :: MVisibility
--          cconv      :: MCConv
--          uaddr      :: MUnnamedAddr
--          paramattr  :: MAttributes
--          optAlign   :: MAlign          
--          gcName     :: MGCName

{
emptyFunction :: Function
emptyFunction = FunctionDef "undefined" ExternalLinkage TyVoid [] []
}
          
data BasicBlock
  | BasicBlock 
      label  :: Label
      instrs :: Instructions
--          tmn    :: Terminator

 
data Identifier 
  | Global name :: Id -- (functions, global variables) begin with the '@'
  | Local  name :: Id -- (register names, types) begin with the '%'
         
data Value 
  | Id       v :: Identifier ty :: Type
  | Constant c :: Constant

data Constant
  | BlockAddr
  | ConstantAggregateZero  ty   :: Type
  | ConstantArray          ty   :: Type  vals :: Values
  | ConstantDataSequential cds  :: ConstantDataSequential
  | ConstantExpr           expr :: ConstantExpr
  | ConstantFP             fp   :: ConstantFP
  | ConstantInt            iv   :: Int   ty :: Type
  | ConstantPointerNull    ty   :: Type
  | ConstantStruct         ty   :: Type vals :: Values
  | ConstantVector          
  | GlobalValue            gv :: GlobalValue
  | UndefValue

data ConstantFP
  | ConstantFPFloat  fpv :: Float ty :: Type
  | ConstantFPDouble dbv :: Double ty :: Type

data GlobalValue
  | FunctionValue  n :: Identifier ty :: Type
  | GlobalAlias    n :: Identifier ty :: Type
  | GlobalVariable n :: Identifier ty :: Type

data ConstantDataSequential
  | ConstantDataArray  ty :: Type val :: String 
  | ConstantDataVector ty :: Type val :: String

data ConstantExpr
  | BinaryConstantExpr
  | CompareConstantExpr       cmpExpr :: CompareConstantExpr 
  | ExtractElementConstantExpr
  | ExtractValueConstantExpr
  | GetElementPtrConstantExpr struct :: Value idxs :: Values
  | InsertElementConstantExpr
  | InsertValueConstantExpr
  | SelectConstantExpr
  | ShuffleVectorConstantExpr
  | UnaryConstantExpr         name :: String op :: Int val :: Value ty :: Type

data CompareConstantExpr
  | ICmpExpr cond :: IntPredicate ty :: Type op1 :: Value op2 :: Value
  | FCmpExpr cond :: RealPredicate ty :: Type op1 :: Value op2 :: Value 

data Align
  | Align n :: Int

data Section
  | Section s :: String
      
data Argument
  | Argument arg :: Value

data Parameter
  | Parameter 
      var :: Id  -- ^In practice, the name is optional
      ty  :: Type
       -- attr :: MAttribute            

--  All Global Variables and Functions have one of the following types of linkage.
data Linkage
  | ExternalLinkage     -- ^Externally visible function
  | AvailableExternallyLinkage
  | LinkOnceAnyLinkage  -- ^Keep one copy of function when linking (inline)
  | LinkOnceODRLinkage  -- ^Same, but only replaced by something equivalent.
  | WeakAnyLinkage      -- ^Keep one copy of named function when linking (weak)
  | WeakODRLinkage      -- ^Same, but only replaced by something equivalent.
  | AppendingLinkage    -- ^Special purpose, only applies to global arrays
  | InternalLinkage     -- ^Rename collisions when linking (static functions)
  | PrivateLinkage      -- ^Like Internal, but omit from symbol table
  | DLLImportLinkage    -- ^Function to be imported from DLL
  | DLLExportLinkage    -- ^Function to be accessible from DLL
  | ExternalWeakLinkage -- ^ExternalWeak linkage description
  | GhostLinkage        -- ^Stand-in functions for streaming fns from BC files
  | CommonLinkage       -- ^Tentative definitions
  | LinkerPrivateLinkage -- ^Like Private, but linker removes.
  | LinkerPrivateWeakLinkage -- ^Similar to PrivateLinkage, but the symbol is weak.
  | LinkerPrivateWeakDefAutoLinkage -- ^Similar to LinkerPrivateWeakLinkage, but its known that the address of the object is not taken.

-- Call Convention
-- LLVM functions, calls and invokes can all have an optional calling convention specified for the call.
data CConv 
  | Ccc    -- The C calling convention
  | Fastcc -- The fast calling convention
  | Coldcc -- The cold calling convention
  | Cc10   -- GHC convention
  | Cc n :: Int -- Numbered convention

-- All Global Variables and Functions have one of the following visibility styles.
data Visibility 
  | Default
  | Hidden
  | Protected

-- Parameter Attributes      
data Attribute
  | ZExtAttribute
  | SExtAttribute
  | NoReturnAttribute
  | InRegAttribute
  | StructRetAttribute
  | NoUnwindAttribute
  | NoAliasAttribute
  | ByValAttribute
  | NestAttribute
  | ReadNoneAttribute
  | ReadOnlyAttribute
  | NoInlineAttribute
  | AlwaysInlineAttribute
  | OptimizeForSizeAttribute
  | StackProtectAttribute
  | StackProtectReqAttribute
  | NoCaptureAttribute
  | NoRedZoneAttribute
  | NoImplicitFloatAttribute
  | NakedAttribute

-- Garbage Collector Names   
data GCName
  | GCName name :: String

-- Function Attributes
data FunAttr
  | AddressSafety
  | Alignstack n :: Int
  | Alwaysinline
  | Nonlazybind
  | Inlinehint
  | Naked
  | Noimplicitfloat
  | Noinline
  | Noredzone
  | Noreturn
  | Nounwind
  | Optsize
  | Readnone
  | Readonly
  | ReturnsTwice
  | Ssp
  | Sspreq
  | Uwtable
                  
data DefinitionTy
  | ThreadLocal
  | ConstantD

data Alias
  | Alias 
      name       :: Id
--          linkage    :: MLinkageTy
--          visibility :: MVisibility
--          aliaseeTy  :: Type
--          aliasee    :: Id
  
set Every = Module Global Function Linkage CConv Visibility DefinitionTy LocalVar Argument Align GCName FunAttr BasicBlock Instruction DataLayout Alias Attribute Section Value Identifier TargetData Target Parameter IntPredicate RealPredicate Constant GlobalValue ConstantDataSequential ConstantExpr ConstantFP RetInst NamedTypes CompareConstantExpr BinOp AtomicOrdering

deriving Every: Show
deriving Every: Eq
deriving Every: Ord
deriving Linkage: Enum
